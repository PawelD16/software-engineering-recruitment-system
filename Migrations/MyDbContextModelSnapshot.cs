// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using projektowaniaOprogramowania.Models;

namespace projektowaniaOprogramowania.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.CollegeStructures.KierunekViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CzasTrwaniaWSemestrach")
                        .HasColumnType("integer");

                    b.Property<int>("Czesne")
                        .HasColumnType("integer");

                    b.Property<int>("CzesneDlaCudzoziemcow")
                        .HasColumnType("integer");

                    b.Property<string>("Dyscyplina")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("FkIdWydzial")
                        .HasColumnType("bigint");

                    b.Property<int>("Jezyk")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<string>("NazwaKierunku")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ProfilKierunku")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("SkrotKierunku")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("StopienStudiow")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<int>("TrybStudiowania")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FkIdWydzial");

                    b.ToTable("kierunki");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CzasTrwaniaWSemestrach = 7,
                            Czesne = 0,
                            CzesneDlaCudzoziemcow = 1250,
                            Dyscyplina = "informatyka techniczna i telekomunikacja",
                            FkIdWydzial = 1L,
                            Jezyk = 0,
                            NazwaKierunku = "Informatyka Stosowana",
                            ProfilKierunku = "ogólnoakademicki",
                            SkrotKierunku = "IST",
                            StopienStudiow = 0,
                            TrybStudiowania = 0
                        },
                        new
                        {
                            Id = 2L,
                            CzasTrwaniaWSemestrach = 7,
                            Czesne = 50,
                            CzesneDlaCudzoziemcow = 1300,
                            Dyscyplina = "informatyka techniczna i telekomunikacja",
                            FkIdWydzial = 1L,
                            Jezyk = 1,
                            NazwaKierunku = "Informatyka Techniczna w j. angielskim",
                            ProfilKierunku = "ogólnoakademicki",
                            SkrotKierunku = "ITA",
                            StopienStudiow = 1,
                            TrybStudiowania = 0
                        },
                        new
                        {
                            Id = 3L,
                            CzasTrwaniaWSemestrach = 7,
                            Czesne = 0,
                            CzesneDlaCudzoziemcow = 1250,
                            Dyscyplina = "informatyka techniczna i telekomunikacja",
                            FkIdWydzial = 1L,
                            Jezyk = 0,
                            NazwaKierunku = "Informatyczne Systemy Automatyki",
                            ProfilKierunku = "ogólnoakademicki",
                            SkrotKierunku = "ISA",
                            StopienStudiow = 0,
                            TrybStudiowania = 2
                        },
                        new
                        {
                            Id = 4L,
                            CzasTrwaniaWSemestrach = 7,
                            Czesne = 100,
                            CzesneDlaCudzoziemcow = 1350,
                            Dyscyplina = "informatyka techniczna i telekomunikacja",
                            FkIdWydzial = 1L,
                            Jezyk = 1,
                            NazwaKierunku = "Informatyka Stosowana w j.angielskim",
                            ProfilKierunku = "",
                            SkrotKierunku = "ISTA",
                            StopienStudiow = 0,
                            TrybStudiowania = 1
                        });
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.CollegeStructures.MiastoViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NazwaMiasta")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("miasta");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            NazwaMiasta = "Wrocław"
                        });
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.CollegeStructures.WydzialViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("MiastoId")
                        .HasColumnType("bigint");

                    b.Property<string>("NazwaWydzialu")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NumerWydzialu")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("MiastoId");

                    b.ToTable("wydzialy");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            MiastoId = 1L,
                            NazwaWydzialu = "Wydział Informatyki i Telekomunikacji",
                            NumerWydzialu = "W04n"
                        });
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.DodatkoweOsiagniecieViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DataZdobycia")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("FkIdPodanieKandydata")
                        .HasColumnType("bigint");

                    b.Property<long>("FkIdPrzelicznikOsiagniec")
                        .HasColumnType("bigint");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(1000000)
                        .HasColumnType("character varying(1000000)");

                    b.HasKey("Id");

                    b.HasIndex("FkIdPodanieKandydata");

                    b.HasIndex("FkIdPrzelicznikOsiagniec");

                    b.ToTable("dodatkowe_osiagniecia");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.DorobekNaukowyViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DataUzyskaniaDorobku")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("FkIdKategoriaDorobku")
                        .HasColumnType("bigint");

                    b.Property<long>("FkIdPodanieNaIIStopien")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FkIdKategoriaDorobku");

                    b.HasIndex("FkIdPodanieNaIIStopien");

                    b.ToTable("dorobei_naukowe");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.KategoriaDorobkuViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NazwaKategoriiDorobku")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("kategorie_dorobku");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            NazwaKategoriiDorobku = "Publikacja w czasopiśmie"
                        },
                        new
                        {
                            Id = 2L,
                            NazwaKategoriiDorobku = "Publikacja książki"
                        },
                        new
                        {
                            Id = 3L,
                            NazwaKategoriiDorobku = "Publikacja patentu"
                        },
                        new
                        {
                            Id = 4L,
                            NazwaKategoriiDorobku = "Rysunek architektoniczny"
                        });
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.KategoriaOsiagnieciaViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NazwaKategorii")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("kategorie_osiagniecia");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            NazwaKategorii = "Laureat konkursu - przedmiot ścisły"
                        },
                        new
                        {
                            Id = 2L,
                            NazwaKategorii = "Laureat konkursu - przedmiot humanistyczny"
                        },
                        new
                        {
                            Id = 3L,
                            NazwaKategorii = "Paszport Polsatu"
                        },
                        new
                        {
                            Id = 4L,
                            NazwaKategorii = "Nagroda Nobla"
                        });
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.KierunekNaPodaniuViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("FkIdKierunek")
                        .HasColumnType("bigint");

                    b.Property<long>("FkIdPodanieKandydata")
                        .HasColumnType("bigint");

                    b.Property<int>("Priorytet")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FkIdKierunek");

                    b.HasIndex("FkIdPodanieKandydata");

                    b.ToTable("kierunki_na_podaniach");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.MaturaViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DataPrzystapieniaDoMatury")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("matury");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.OcenaViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("FkIdPrzedmiot")
                        .HasColumnType("bigint");

                    b.Property<long>("Maturaid")
                        .HasColumnType("bigint");

                    b.Property<int>("WartoscProcentowa")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FkIdPrzedmiot");

                    b.HasIndex("Maturaid");

                    b.ToTable("oceny");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PodanieKandydataViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("CzyAktywny")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataZlozeniaPodania")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("FkIdKandydat")
                        .HasColumnType("bigint");

                    b.Property<long>("FkIdRekrutacja")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FkIdKandydat");

                    b.HasIndex("FkIdRekrutacja");

                    b.ToTable("podania_kandydatow");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PracownikDzialuRekrutacjiNaPodanieKandydataViewModel", b =>
                {
                    b.Property<long>("PkFkIdPodanieKandydata")
                        .HasColumnType("bigint");

                    b.Property<long>("PkFkIdPracownikDzialuRekrutacji")
                        .HasColumnType("bigint");

                    b.HasKey("PkFkIdPodanieKandydata", "PkFkIdPracownikDzialuRekrutacji");

                    b.HasIndex("PkFkIdPracownikDzialuRekrutacji");

                    b.ToTable("pracownicy_dzialu_rekrutacji_na_podania_kandydata");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PrzedmiotViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NazwaPrzedmiotu")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("przedmioty");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            NazwaPrzedmiotu = "Matematyka podstawowa"
                        },
                        new
                        {
                            Id = 2L,
                            NazwaPrzedmiotu = "Fizyka podstawowa"
                        },
                        new
                        {
                            Id = 3L,
                            NazwaPrzedmiotu = "Chemia podstawowa"
                        },
                        new
                        {
                            Id = 4L,
                            NazwaPrzedmiotu = "Informatyka podstawowa"
                        },
                        new
                        {
                            Id = 5L,
                            NazwaPrzedmiotu = "Geografia podstawowa"
                        },
                        new
                        {
                            Id = 6L,
                            NazwaPrzedmiotu = "Biologia podstawowa"
                        },
                        new
                        {
                            Id = 7L,
                            NazwaPrzedmiotu = "Język polski podstawowy"
                        },
                        new
                        {
                            Id = 8L,
                            NazwaPrzedmiotu = "Język obcy podstawowy"
                        },
                        new
                        {
                            Id = 9L,
                            NazwaPrzedmiotu = "Matematyka rozszerzona"
                        },
                        new
                        {
                            Id = 10L,
                            NazwaPrzedmiotu = "Fizyka rozszerzona"
                        },
                        new
                        {
                            Id = 11L,
                            NazwaPrzedmiotu = "Chemia rozszerzona"
                        },
                        new
                        {
                            Id = 12L,
                            NazwaPrzedmiotu = "Informatyka rozszerzona"
                        },
                        new
                        {
                            Id = 13L,
                            NazwaPrzedmiotu = "Geografia rozszerzona"
                        },
                        new
                        {
                            Id = 14L,
                            NazwaPrzedmiotu = "Biologia rozszerzona"
                        },
                        new
                        {
                            Id = 15L,
                            NazwaPrzedmiotu = "Język polski rozszerzony"
                        },
                        new
                        {
                            Id = 16L,
                            NazwaPrzedmiotu = "Język obcy rozszerzony"
                        });
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PrzelicznikDorobkuViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("FkIdKategoriaDorobku")
                        .HasColumnType("bigint");

                    b.Property<long>("FkIdPrzelicznikKierunkowy")
                        .HasColumnType("bigint");

                    b.Property<int>("PrzyznawanePunkty")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FkIdKategoriaDorobku");

                    b.HasIndex("FkIdPrzelicznikKierunkowy");

                    b.ToTable("przeliczniki_dorobku");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PrzelicznikKierunkowyViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("FkIdKierunek")
                        .HasColumnType("bigint");

                    b.Property<int>("MaksymalnaWartoscPrzelicznika")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FkIdKierunek");

                    b.ToTable("przeliczniki_kierunkowe");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PrzelicznikOsiagniecViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("FkIdKategoriaOsiagniecia")
                        .HasColumnType("bigint");

                    b.Property<long>("FkIdPrzelicznikKierunkowy")
                        .HasColumnType("bigint");

                    b.Property<int>("PrzyznawanePunkty")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FkIdKategoriaOsiagniecia");

                    b.HasIndex("FkIdPrzelicznikKierunkowy");

                    b.ToTable("przeliczniki_osiagniec");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PrzelicznikPrzedmiotuViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("FkIdPrzedmiot")
                        .HasColumnType("bigint");

                    b.Property<long>("FkIdPrzelicznikKierunkowy")
                        .HasColumnType("bigint");

                    b.Property<float>("Wspolczynnik")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FkIdPrzedmiot");

                    b.HasIndex("FkIdPrzelicznikKierunkowy");

                    b.ToTable("przeliczniki_przedmiotu");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.RekrutacjaViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DataOtwarciaRekrutacji")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataZamknieciaPrzyjec")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataZamknieciaRekrutacji")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SemestrRekrutacji")
                        .HasColumnType("integer");

                    b.Property<int>("StatusRekrutacji")
                        .HasColumnType("integer");

                    b.Property<int>("StopienStudiow")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("rekrutacje");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.Users.OsobaViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("CzyEmailPotwierdzony")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataZarejestrowania")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Haslo")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("NumerPaszportu")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Pesel")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.HasKey("Id");

                    b.ToTable("osoby");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PodanieNaIIStopienViewModel", b =>
                {
                    b.HasBaseType("projektowaniaOprogramowania.ViewModels.PodanieKandydataViewModel");

                    b.Property<float>("OcenaZPracyDyplomowej")
                        .HasColumnType("real");

                    b.Property<float>("SredniaZTokuStudiow")
                        .HasColumnType("real");

                    b.ToTable("podania_na_II_stopien");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PodanieNaIStopienViewModel", b =>
                {
                    b.HasBaseType("projektowaniaOprogramowania.ViewModels.PodanieKandydataViewModel");

                    b.Property<long>("FkIdMatura")
                        .HasColumnType("bigint");

                    b.HasIndex("FkIdMatura");

                    b.ToTable("podania_na_I_stopien");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.Users.KandydatViewModel", b =>
                {
                    b.HasBaseType("projektowaniaOprogramowania.ViewModels.Users.OsobaViewModel");

                    b.Property<string>("NumerKandydata")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasIndex("NumerKandydata")
                        .IsUnique();

                    b.ToTable("kandydaci");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CzyEmailPotwierdzony = true,
                            DataZarejestrowania = new DateTime(2024, 1, 6, 10, 27, 7, 478, DateTimeKind.Local).AddTicks(2581),
                            Email = "testowykandydat@gmail.com",
                            Haslo = "zahaszowaneHaselko",
                            Imie = "Jan",
                            Login = "testowyKandydat",
                            Nazwisko = "Testowy",
                            Pesel = "59070575419",
                            NumerKandydata = "5907057541"
                        });
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.Users.PracownikViewModel", b =>
                {
                    b.HasBaseType("projektowaniaOprogramowania.ViewModels.Users.OsobaViewModel");

                    b.Property<DateTime>("DataZatrudnienia")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NumerPracownika")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("TypPracownika")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasIndex("NumerPracownika")
                        .IsUnique();

                    b.ToTable("pracownicy");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.Users.PracownikDzialuRekrutacjiViewModel", b =>
                {
                    b.HasBaseType("projektowaniaOprogramowania.ViewModels.Users.PracownikViewModel");

                    b.Property<long>("FkIdWydzial")
                        .HasColumnType("bigint");

                    b.HasIndex("FkIdWydzial");

                    b.ToTable("pracownicy_dzialu_rekrutacji");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.CollegeStructures.KierunekViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.CollegeStructures.WydzialViewModel", "Wydzial")
                        .WithMany()
                        .HasForeignKey("FkIdWydzial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wydzial");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.CollegeStructures.WydzialViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.CollegeStructures.MiastoViewModel", "Miasto")
                        .WithMany()
                        .HasForeignKey("MiastoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Miasto");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.DodatkoweOsiagniecieViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.PodanieKandydataViewModel", "PodanieKandydata")
                        .WithMany()
                        .HasForeignKey("FkIdPodanieKandydata")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projektowaniaOprogramowania.ViewModels.PrzelicznikOsiagniecViewModel", "PrzelicznikOsiagniec")
                        .WithMany()
                        .HasForeignKey("FkIdPrzelicznikOsiagniec")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PodanieKandydata");

                    b.Navigation("PrzelicznikOsiagniec");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.DorobekNaukowyViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.KategoriaDorobkuViewModel", "KategoriaDorobku")
                        .WithMany()
                        .HasForeignKey("FkIdKategoriaDorobku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projektowaniaOprogramowania.ViewModels.PodanieNaIIStopienViewModel", "PodanieNaIIStopien")
                        .WithMany()
                        .HasForeignKey("FkIdPodanieNaIIStopien")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KategoriaDorobku");

                    b.Navigation("PodanieNaIIStopien");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.KierunekNaPodaniuViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.CollegeStructures.KierunekViewModel", "Kierunek")
                        .WithMany()
                        .HasForeignKey("FkIdKierunek")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projektowaniaOprogramowania.ViewModels.PodanieKandydataViewModel", "PodanieKandydata")
                        .WithMany()
                        .HasForeignKey("FkIdPodanieKandydata")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kierunek");

                    b.Navigation("PodanieKandydata");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.OcenaViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.PrzedmiotViewModel", "Przedmiot")
                        .WithMany()
                        .HasForeignKey("FkIdPrzedmiot")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projektowaniaOprogramowania.ViewModels.MaturaViewModel", "Matura")
                        .WithMany()
                        .HasForeignKey("Maturaid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matura");

                    b.Navigation("Przedmiot");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PodanieKandydataViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.Users.KandydatViewModel", "Kandydat")
                        .WithMany()
                        .HasForeignKey("FkIdKandydat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projektowaniaOprogramowania.ViewModels.RekrutacjaViewModel", "Rekrutacja")
                        .WithMany()
                        .HasForeignKey("FkIdRekrutacja")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kandydat");

                    b.Navigation("Rekrutacja");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PracownikDzialuRekrutacjiNaPodanieKandydataViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.PodanieKandydataViewModel", "PodanieKandydata")
                        .WithMany()
                        .HasForeignKey("PkFkIdPodanieKandydata")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projektowaniaOprogramowania.ViewModels.Users.PracownikDzialuRekrutacjiViewModel", "PracownikDzialuRekrutacji")
                        .WithMany()
                        .HasForeignKey("PkFkIdPracownikDzialuRekrutacji")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PodanieKandydata");

                    b.Navigation("PracownikDzialuRekrutacji");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PrzelicznikDorobkuViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.KategoriaDorobkuViewModel", "KategoriaDorobku")
                        .WithMany()
                        .HasForeignKey("FkIdKategoriaDorobku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projektowaniaOprogramowania.ViewModels.PrzelicznikKierunkowyViewModel", "PrzelicznikKierunkowy")
                        .WithMany()
                        .HasForeignKey("FkIdPrzelicznikKierunkowy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KategoriaDorobku");

                    b.Navigation("PrzelicznikKierunkowy");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PrzelicznikKierunkowyViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.CollegeStructures.KierunekViewModel", "Kierunek")
                        .WithMany()
                        .HasForeignKey("FkIdKierunek")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kierunek");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PrzelicznikOsiagniecViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.KategoriaOsiagnieciaViewModel", "KategoriaOsiagniecia")
                        .WithMany()
                        .HasForeignKey("FkIdKategoriaOsiagniecia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projektowaniaOprogramowania.ViewModels.PrzelicznikKierunkowyViewModel", "PrzelicznikKierunkowy")
                        .WithMany()
                        .HasForeignKey("FkIdPrzelicznikKierunkowy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KategoriaOsiagniecia");

                    b.Navigation("PrzelicznikKierunkowy");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PrzelicznikPrzedmiotuViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.PrzedmiotViewModel", "Przedmiot")
                        .WithMany()
                        .HasForeignKey("FkIdPrzedmiot")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projektowaniaOprogramowania.ViewModels.PrzelicznikKierunkowyViewModel", "PrzelicznikKierunkowy")
                        .WithMany()
                        .HasForeignKey("FkIdPrzelicznikKierunkowy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Przedmiot");

                    b.Navigation("PrzelicznikKierunkowy");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PodanieNaIIStopienViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.PodanieKandydataViewModel", null)
                        .WithOne()
                        .HasForeignKey("projektowaniaOprogramowania.ViewModels.PodanieNaIIStopienViewModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.PodanieNaIStopienViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.MaturaViewModel", "Matura")
                        .WithMany()
                        .HasForeignKey("FkIdMatura")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projektowaniaOprogramowania.ViewModels.PodanieKandydataViewModel", null)
                        .WithOne()
                        .HasForeignKey("projektowaniaOprogramowania.ViewModels.PodanieNaIStopienViewModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matura");
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.Users.KandydatViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.Users.OsobaViewModel", null)
                        .WithOne()
                        .HasForeignKey("projektowaniaOprogramowania.ViewModels.Users.KandydatViewModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.Users.PracownikViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.Users.OsobaViewModel", null)
                        .WithOne()
                        .HasForeignKey("projektowaniaOprogramowania.ViewModels.Users.PracownikViewModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projektowaniaOprogramowania.ViewModels.Users.PracownikDzialuRekrutacjiViewModel", b =>
                {
                    b.HasOne("projektowaniaOprogramowania.ViewModels.CollegeStructures.WydzialViewModel", "Wydzial")
                        .WithMany()
                        .HasForeignKey("FkIdWydzial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projektowaniaOprogramowania.ViewModels.Users.PracownikViewModel", null)
                        .WithOne()
                        .HasForeignKey("projektowaniaOprogramowania.ViewModels.Users.PracownikDzialuRekrutacjiViewModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wydzial");
                });
#pragma warning restore 612, 618
        }
    }
}
