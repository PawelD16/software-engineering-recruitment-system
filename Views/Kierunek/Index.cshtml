@model IEnumerable<projektowaniaOprogramowania.ViewModels.CollegeStructures.KierunekModel>
@using projektowaniaOprogramowania.ViewModels
@using projektowaniaOprogramowania.ViewModels.CollegeStructures

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    var rekrutacja = (ViewData["rekrutacja"] as RekrutacjaModel);
    var year = (ViewData["rekrutacja"] as RekrutacjaModel).DataOtwarciaRekrutacji.Year;
    var result = $"{year}/{year + 1} Semestr {rekrutacja.SemestrRekrutacji} - {rekrutacja.StopienStudiow} Stopień";
}
<h1>@result</h1>

<div aria-live="polite" aria-atomic="true">
  <!-- Position it: -->
  <!-- - `.toast-container` for spacing between toasts -->
  <!-- - `.position-absolute`, `top-0` & `end-0` to position the toasts in the upper right corner -->
  <!-- - `.p-3` to prevent the toasts from sticking to the edge of the container  -->
<div class="toast-container position-fixed p-3" style="bottom:50px;left: 50px;z-index:999;">
    <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-body bg-primary">
           Podanie zostało wysłane
        </div>
    </div>
</div>
</div>

<div class="offcanvas position-fixed" style="top:150px;right: 20px;"id="offcanvas">
    <h5>Zapisane kierunki</h5>
    <div class="offcanvas-body">
        <div>
            @foreach (KierunekModel kierunek in (ViewData["kierunki"] as List<KierunekModel>))
            {
                <div>@kierunek.NazwaKierunku</div>
            }
        </div>
    </div>
    <div class="row">
        <div class="col">
            <a onclick="sendPodanie(event)" class="btn btn-primary" asp-action="WyslijPodanie">Wyślij podanie</a> 
        </div>
        <div class="col">
            <a class="btn btn-danger" asp-action="WyczyscKierunki">Wyczyść kierunki</a> 
        </div>
    </div>
</div>

<p>
    <a asp-action="Create">Create New</a>
</p>
<div id="accordion" class="bg-secondary">
    @foreach (var item in Model)
    {
        <div class="card bg-secondary">
            <div class="card-header bg-secondary" id="heading-@item.Id">
                <h5 class="mb-0">
                    <button class="btn" style="width:100%" data-toggle="collapse" data-target="#collapse-@item.Id" aria-expanded="true" aria-controls="collapse-@item.Id">
                        @{
                            var punkty = (ViewData["punkty"] as List<(KierunekModel, int)>)
                                .Find(e=>e.Item1.Id==item.Id).Item2;
                                    
                            

                            <div class="row d-flex justify-content-around" style="width: 100%">
                                <div class="col-8">
                                    <h4>@item.NazwaKierunku</h4>
                                </div>
                                <div class="col-4">
                                    <h4>@punkty/510</h4>
                                </div>

                            </div>
                        }
                    </button>
                </h5>
            </div>
            <div id="collapse-@item.Id" class="collapse show bg-secondary" aria-labelledby="heading-@item.Id" data-parent="#accordion">
                <div class="container" style="padding-top: 1rem;padding-bottom: 2rem;">
                    <div class="row d-flex justify-content-around" style="padding: 1rem;border-radius: 1rem;">
                    
                        <div class="col-6 btn-primary" style="padding: 2rem; margin: 1rem; border-radius: 1rem;">
                            <div class="row">
                                <label>Opis</label>
                            </div>
                            <div class="row">
                                @item.Opis
                            </div>
                        </div>
                        <div class="col-3 bg-gray justify-content-end" style="padding: 2rem; margin:  1rem; border-radius: 1rem">
                            <div class="row justify-content-start" style="border-bottom: 1px solid white;">
                                <label>Przeliczniki</label>
                            </div>
                            <div class="row">
                                @{
                                    foreach (var przedmiot in item.Przelicznik.PrzelicznikPrzemiotu)
                                    {
                                        <div class="row d-flex justify-content-end" style="border-bottom: 1px solid white;margin-left: 1rem;">
                                            <div class="col-8" style="padding-left: 0;border-right: 1px solid white;">@((ViewData["przedmioty"] as List<PrzelicznikPrzedmiotuModel>).Find(e => e.Id == przedmiot.Id).Przedmiot.NazwaPrzedmiotu)</div>
                                            <div class="col-4" style="width:100%;">@przedmiot.Wspolczynnik</div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                        
                    </div>
                    <div class="container row" style="margin-left: 2rem;margin-right:5rem;">
                        <div class="col-3 justify-content-center d-flex flex-column">
                            <a class="btn btn-primary" style="width: 100%;" asp-action="AddKierunekToPodanie" asp-route-id="@item.Id">Dodaj</a> 
                        </div>
                        <div class="col-3 justify-content-center d-flex flex-column">
                            <a class="btn btn-danger" style="width: 100%;" asp-action="RemoveKierunekFromPodanie" asp-route-id="@item.Id">Usun</a> 
                        </div>
                        <div class="col-5" style="margin:auto">
                            <label style="margin-left: 2rem">Liczba punktów</label>
                            <span class="recruitment-score-tile">@punkty</span>
                        </div>
                    </div>
                
                </div>
            </div>
        </div>
    }
</div>
@* <button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasExample" aria-controls="offcanvasExample"> *@
@*   Button with data-bs-target *@
@* </button> *@


@* <div> *@
@*     @foreach (KierunekViewModel kierunek in (ViewData["kierunki"] as List<KierunekViewModel>)) *@
@*     { *@
@*         <div>@kierunek.NazwaKierunku</div> *@
@*     } *@
@* </div> *@
@* @section Scripts{ *@
@*     $1$ <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous"> #1# *@
@*     <script> *@
@*     const offcanvasElementList = document.querySelectorAll('.offcanvas') *@
@*     console.log(bootstrap); *@
@*     const offcanvasList = [...offcanvasElementList].map(offcanvasEl => new bootstrap.Offcanvas(offcanvasEl)) *@
@*     </script> *@
@* } *@


@section Scripts{
    <script defer>
    var toastElList = [].slice.call(document.querySelectorAll('.toast'))
    var toastList = toastElList.map(function (toastEl) {
    return new bootstrap.Toast(toastEl, {delay:10000})
    })
    function sendPodanie(event){
        toastList[0].show();

    }
    </script>
}